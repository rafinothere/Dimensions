//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/fvck/InputMap/InputSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputSystem: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputSystem()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputSystem"",
    ""maps"": [
        {
            ""name"": ""MoveInput"",
            ""id"": ""dde177af-d1cc-4e75-b4cb-df6a67235699"",
            ""actions"": [
                {
                    ""name"": ""MoveUp"",
                    ""type"": ""Button"",
                    ""id"": ""720151e3-bd49-476c-ad3b-e9f244dd1728"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveLeft"",
                    ""type"": ""Button"",
                    ""id"": ""db432a71-d7e0-4c11-ae35-cce8b9849022"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveDown"",
                    ""type"": ""Button"",
                    ""id"": ""b13e12c8-cd5d-4768-9dff-6f615418f131"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveRight"",
                    ""type"": ""Button"",
                    ""id"": ""95628e9e-76e9-477e-92d5-84614116d0e8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftShoot"",
                    ""type"": ""Button"",
                    ""id"": ""7571b43c-64fb-4492-a79c-c2189864275a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightShoot"",
                    ""type"": ""Button"",
                    ""id"": ""21710cc1-30c4-4936-a589-d819ae529124"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ScrollAbility"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f919067b-3a98-4703-ac95-364556c8bad7"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7872a17c-3838-4e31-be93-255d5bafc58c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""03a024d3-55e7-410f-bb1f-a182872c9956"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""58d4ea45-0547-4a82-adf8-9079174b1d0b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""414b1a70-e606-4079-85d1-601913e4bfce"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ce565c6e-a2d2-442e-b412-0ad357ae44ba"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftShoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ac7a0f37-46bd-4819-8346-ecd42abd0fae"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightShoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""951c468e-dcd6-4e1f-ab95-2155fb553179"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScrollAbility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MoveInput
        m_MoveInput = asset.FindActionMap("MoveInput", throwIfNotFound: true);
        m_MoveInput_MoveUp = m_MoveInput.FindAction("MoveUp", throwIfNotFound: true);
        m_MoveInput_MoveLeft = m_MoveInput.FindAction("MoveLeft", throwIfNotFound: true);
        m_MoveInput_MoveDown = m_MoveInput.FindAction("MoveDown", throwIfNotFound: true);
        m_MoveInput_MoveRight = m_MoveInput.FindAction("MoveRight", throwIfNotFound: true);
        m_MoveInput_LeftShoot = m_MoveInput.FindAction("LeftShoot", throwIfNotFound: true);
        m_MoveInput_RightShoot = m_MoveInput.FindAction("RightShoot", throwIfNotFound: true);
        m_MoveInput_ScrollAbility = m_MoveInput.FindAction("ScrollAbility", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MoveInput
    private readonly InputActionMap m_MoveInput;
    private List<IMoveInputActions> m_MoveInputActionsCallbackInterfaces = new List<IMoveInputActions>();
    private readonly InputAction m_MoveInput_MoveUp;
    private readonly InputAction m_MoveInput_MoveLeft;
    private readonly InputAction m_MoveInput_MoveDown;
    private readonly InputAction m_MoveInput_MoveRight;
    private readonly InputAction m_MoveInput_LeftShoot;
    private readonly InputAction m_MoveInput_RightShoot;
    private readonly InputAction m_MoveInput_ScrollAbility;
    public struct MoveInputActions
    {
        private @InputSystem m_Wrapper;
        public MoveInputActions(@InputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveUp => m_Wrapper.m_MoveInput_MoveUp;
        public InputAction @MoveLeft => m_Wrapper.m_MoveInput_MoveLeft;
        public InputAction @MoveDown => m_Wrapper.m_MoveInput_MoveDown;
        public InputAction @MoveRight => m_Wrapper.m_MoveInput_MoveRight;
        public InputAction @LeftShoot => m_Wrapper.m_MoveInput_LeftShoot;
        public InputAction @RightShoot => m_Wrapper.m_MoveInput_RightShoot;
        public InputAction @ScrollAbility => m_Wrapper.m_MoveInput_ScrollAbility;
        public InputActionMap Get() { return m_Wrapper.m_MoveInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MoveInputActions set) { return set.Get(); }
        public void AddCallbacks(IMoveInputActions instance)
        {
            if (instance == null || m_Wrapper.m_MoveInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MoveInputActionsCallbackInterfaces.Add(instance);
            @MoveUp.started += instance.OnMoveUp;
            @MoveUp.performed += instance.OnMoveUp;
            @MoveUp.canceled += instance.OnMoveUp;
            @MoveLeft.started += instance.OnMoveLeft;
            @MoveLeft.performed += instance.OnMoveLeft;
            @MoveLeft.canceled += instance.OnMoveLeft;
            @MoveDown.started += instance.OnMoveDown;
            @MoveDown.performed += instance.OnMoveDown;
            @MoveDown.canceled += instance.OnMoveDown;
            @MoveRight.started += instance.OnMoveRight;
            @MoveRight.performed += instance.OnMoveRight;
            @MoveRight.canceled += instance.OnMoveRight;
            @LeftShoot.started += instance.OnLeftShoot;
            @LeftShoot.performed += instance.OnLeftShoot;
            @LeftShoot.canceled += instance.OnLeftShoot;
            @RightShoot.started += instance.OnRightShoot;
            @RightShoot.performed += instance.OnRightShoot;
            @RightShoot.canceled += instance.OnRightShoot;
            @ScrollAbility.started += instance.OnScrollAbility;
            @ScrollAbility.performed += instance.OnScrollAbility;
            @ScrollAbility.canceled += instance.OnScrollAbility;
        }

        private void UnregisterCallbacks(IMoveInputActions instance)
        {
            @MoveUp.started -= instance.OnMoveUp;
            @MoveUp.performed -= instance.OnMoveUp;
            @MoveUp.canceled -= instance.OnMoveUp;
            @MoveLeft.started -= instance.OnMoveLeft;
            @MoveLeft.performed -= instance.OnMoveLeft;
            @MoveLeft.canceled -= instance.OnMoveLeft;
            @MoveDown.started -= instance.OnMoveDown;
            @MoveDown.performed -= instance.OnMoveDown;
            @MoveDown.canceled -= instance.OnMoveDown;
            @MoveRight.started -= instance.OnMoveRight;
            @MoveRight.performed -= instance.OnMoveRight;
            @MoveRight.canceled -= instance.OnMoveRight;
            @LeftShoot.started -= instance.OnLeftShoot;
            @LeftShoot.performed -= instance.OnLeftShoot;
            @LeftShoot.canceled -= instance.OnLeftShoot;
            @RightShoot.started -= instance.OnRightShoot;
            @RightShoot.performed -= instance.OnRightShoot;
            @RightShoot.canceled -= instance.OnRightShoot;
            @ScrollAbility.started -= instance.OnScrollAbility;
            @ScrollAbility.performed -= instance.OnScrollAbility;
            @ScrollAbility.canceled -= instance.OnScrollAbility;
        }

        public void RemoveCallbacks(IMoveInputActions instance)
        {
            if (m_Wrapper.m_MoveInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMoveInputActions instance)
        {
            foreach (var item in m_Wrapper.m_MoveInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MoveInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MoveInputActions @MoveInput => new MoveInputActions(this);
    public interface IMoveInputActions
    {
        void OnMoveUp(InputAction.CallbackContext context);
        void OnMoveLeft(InputAction.CallbackContext context);
        void OnMoveDown(InputAction.CallbackContext context);
        void OnMoveRight(InputAction.CallbackContext context);
        void OnLeftShoot(InputAction.CallbackContext context);
        void OnRightShoot(InputAction.CallbackContext context);
        void OnScrollAbility(InputAction.CallbackContext context);
    }
}
